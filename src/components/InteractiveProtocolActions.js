import { useState, useCallback } from 'react';

// Protocol action definitions
const PROTOCOL_ACTIONS = {
  ATTACK: {
    id: 'attack',
    name: '⚔️ Attack',
    description: 'Launch a direct assault on this protocol',
    cost: { energy: 20 },
    cooldown: 5000,
    effects: ['damage', 'tvl_loss'],
    successRate: 0.7
  },
  
  HACK: {
    id: 'hack',
    name: '💻 Hack',
    description: 'Attempt to infiltrate and steal resources',
    cost: { energy: 30, riskManagement: 5 },
    cooldown: 15000,
    effects: ['resource_steal', 'temporary_control'],
    successRate: 0.5
  },
  
  INFILTRATE: {
    id: 'infiltrate',
    name: '🕵️ Infiltrate',
    description: 'Secretly gather intelligence on this protocol',
    cost: { energy: 10, leadership: 3 },
    cooldown: 8000,
    effects: ['reveal_info', 'weakness_detection'],
    successRate: 0.8
  },
  
  SABOTAGE: {
    id: 'sabotage',
    name: '💣 Sabotage',
    description: 'Disrupt protocol operations for a limited time',
    cost: { energy: 25, riskManagement: 8 },
    cooldown: 20000,
    effects: ['temporary_disable', 'efficiency_reduction'],
    successRate: 0.6
  },
  
  ALLIANCE_OFFER: {
    id: 'alliance_offer',
    name: '🤝 Alliance Offer',
    description: 'Propose a strategic alliance',
    cost: { energy: 15, leadership: 10, communityBuilding: 5 },
    cooldown: 30000,
    effects: ['alliance_formation', 'mutual_benefits'],
    successRate: 0.4
  },
  
  TRADE_PROPOSAL: {
    id: 'trade_proposal',\n    name: '🔄 Trade Proposal',\n    description: 'Offer to trade resources or benefits',\n    cost: { energy: 10, economicStrategy: 8 },\n    cooldown: 10000,\n    effects: ['resource_exchange', 'temporary_boost'],\n    successRate: 0.75\n  },\n  \n  MARKET_SIEGE: {\n    id: 'market_siege',\n    name: '📈 Market Siege',\n    description: 'Attempt to dominate the same market sector',\n    cost: { energy: 40, economicStrategy: 15, communityBuilding: 10 },\n    cooldown: 60000,\n    effects: ['market_dominance', 'competitor_weakening'],\n    successRate: 0.3\n  },\n  \n  VIRAL_CAMPAIGN: {\n    id: 'viral_campaign',\n    name: '📱 Viral Campaign',\n    description: 'Launch a social media campaign to steal users',\n    cost: { energy: 20, communityBuilding: 12 },\n    cooldown: 25000,\n    effects: ['user_migration', 'reputation_damage'],\n    successRate: 0.65\n  },\n  \n  TECHNICAL_AUDIT: {\n    id: 'technical_audit',\n    name: '🔍 Technical Audit',\n    description: 'Expose vulnerabilities in their smart contracts',\n    cost: { energy: 35, riskManagement: 20 },\n    cooldown: 45000,\n    effects: ['vulnerability_exposure', 'trust_loss'],\n    successRate: 0.4\n  },\n  \n  BOUNTY_HUNT: {\n    id: 'bounty_hunt',\n    name: '🎯 Bounty Hunt',\n    description: 'Recruit white hat hackers to find exploits',\n    cost: { energy: 30, economicStrategy: 10, riskManagement: 15 },\n    cooldown: 40000,\n    effects: ['exploit_discovery', 'security_breach'],\n    successRate: 0.35\n  }\n};\n\n// Protocol interaction results\nconst INTERACTION_RESULTS = {\n  SUCCESS: {\n    attack: {\n      title: '🎯 Attack Successful!',\n      message: 'Your assault was devastating! The protocol has suffered significant damage.',\n      effects: { tvlReduction: 0.15, damageDealt: 25 }\n    },\n    hack: {\n      title: '💻 Hack Complete!',\n      message: 'You successfully infiltrated their systems and extracted valuable data!',\n      effects: { resourcesStolen: 1000, temporaryAccess: 30000 }\n    },\n    infiltrate: {\n      title: '🕵️ Intelligence Gathered!',\n      message: 'Your spy network has revealed crucial information about the target.',\n      effects: { intelGained: true, weaknessRevealed: true }\n    },\n    sabotage: {\n      title: '💣 Sabotage Executed!',\n      message: 'Their operations are severely disrupted! They cannot act for a while.',\n      effects: { disabledDuration: 45000, efficiencyReduction: 0.5 }\n    },\n    alliance_offer: {\n      title: '🤝 Alliance Formed!',\n      message: 'A new strategic partnership has been established!',\n      effects: { allianceFormed: true, mutualBenefits: true }\n    },\n    trade_proposal: {\n      title: '🔄 Trade Accepted!',\n      message: 'Both protocols benefit from this exchange!',\n      effects: { resourceBoost: 500, temporaryBuff: 60000 }\n    },\n    market_siege: {\n      title: '📈 Market Dominated!',\n      message: 'You have successfully cornered the market in this sector!',\n      effects: { marketShare: 0.3, competitorWeakening: 0.2 }\n    },\n    viral_campaign: {\n      title: '📱 Campaign Viral!',\n      message: 'Your campaign went viral! Users are flocking to your protocol!',\n      effects: { userMigration: 5000, reputationDamage: 0.1 }\n    },\n    technical_audit: {\n      title: '🔍 Vulnerabilities Exposed!',\n      message: 'Critical flaws have been revealed to the public!',\n      effects: { trustLoss: 0.25, securityConcerns: true }\n    },\n    bounty_hunt: {\n      title: '🎯 Exploit Discovered!',\n      message: 'White hat hackers found a critical vulnerability!',\n      effects: { exploitFound: true, securityBreach: 0.3 }\n    }\n  },\n  \n  FAILURE: {\n    attack: {\n      title: '⚠️ Attack Repelled!',\n      message: 'Your attack was anticipated and successfully defended against.',\n      effects: { retaliation: true, energyLoss: 10 }\n    },\n    hack: {\n      title: '🚫 Hack Failed!',\n      message: 'Their security systems detected your intrusion attempt.',\n      effects: { detectionRisk: true, reputationLoss: 0.05 }\n    },\n    infiltrate: {\n      title: '👀 Spy Detected!',\n      message: 'Your infiltration attempt was discovered and thwarted.',\n      effects: { spyCompromised: true, trustLoss: 0.1 }\n    },\n    sabotage: {\n      title: '🛡️ Sabotage Prevented!',\n      message: 'They detected your sabotage attempt and increased security.',\n      effects: { securityIncrease: 0.2, alertLevel: 'high' }\n    },\n    alliance_offer: {\n      title: '❌ Alliance Rejected!',\n      message: 'Your alliance proposal was declined. They seem suspicious of your motives.',\n      effects: { relationshipDamage: 0.15, diplomacyPenalty: true }\n    },\n    trade_proposal: {\n      title: '🚫 Trade Declined!',\n      message: 'They found your trade proposal unfavorable.',\n      effects: { economicTension: true, trustReduction: 0.05 }\n    },\n    market_siege: {\n      title: '🛡️ Market Defense!',\n      message: 'They successfully defended their market position.',\n      effects: { counterAttack: true, marketLoss: 0.1 }\n    },\n    viral_campaign: {\n      title: '📉 Campaign Backfired!',\n      message: 'Your campaign was exposed as manipulation and damaged your reputation.',\n      effects: { reputationLoss: 0.2, userMigrationReverse: -2000 }\n    },\n    technical_audit: {\n      title: '✅ Audit Clean!',\n      message: 'Their code was found to be secure, boosting their credibility.',\n      effects: { competitorBoost: 0.1, auditFailure: true }\n    },\n    bounty_hunt: {\n      title: '🔒 No Exploits Found!',\n      message: 'The bounty hunters found their security to be impeccable.',\n      effects: { securityConfidence: 0.15, resourceWaste: 1000 }\n    }\n  }\n};\n\nexport function useProtocolActions(playerStats, onActionResult) {\n  const [actionCooldowns, setActionCooldowns] = useState({});\n  const [energy, setEnergy] = useState(100);\n\n  // Check if action can be performed\n  const canPerformAction = useCallback((actionId, targetProtocol) => {\n    const action = PROTOCOL_ACTIONS[actionId];\n    if (!action) return false;\n\n    // Check cooldown\n    const cooldownEnd = actionCooldowns[actionId];\n    if (cooldownEnd && cooldownEnd > Date.now()) {\n      return false;\n    }\n\n    // Check energy\n    if (energy < action.cost.energy) {\n      return false;\n    }\n\n    // Check trait requirements\n    return Object.entries(action.cost).every(([resource, cost]) => {\n      if (resource === 'energy') return true;\n      return (playerStats.traits[resource] || 0) >= cost;\n    });\n  }, [actionCooldowns, energy, playerStats]);\n\n  // Perform action\n  const performAction = useCallback((actionId, targetProtocol) => {\n    const action = PROTOCOL_ACTIONS[actionId];\n    if (!action || !canPerformAction(actionId, targetProtocol)) {\n      return false;\n    }\n\n    // Deduct costs\n    setEnergy(prev => prev - action.cost.energy);\n    \n    // Set cooldown\n    setActionCooldowns(prev => ({\n      ...prev,\n      [actionId]: Date.now() + action.cooldown\n    }));\n\n    // Determine success/failure\n    const isSuccess = Math.random() < action.successRate;\n    const resultType = isSuccess ? 'SUCCESS' : 'FAILURE';\n    const result = INTERACTION_RESULTS[resultType][actionId];\n\n    // Trigger callback with result\n    onActionResult?.({\n      action,\n      targetProtocol,\n      isSuccess,\n      result,\n      timestamp: Date.now()\n    });\n\n    console.log(`${action.name} on ${targetProtocol.name}: ${resultType}`);\n    return true;\n  }, [canPerformAction, energy, onActionResult]);\n\n  // Get remaining cooldown\n  const getCooldownRemaining = useCallback((actionId) => {\n    const cooldownEnd = actionCooldowns[actionId];\n    if (!cooldownEnd) return 0;\n    return Math.max(0, cooldownEnd - Date.now());\n  }, [actionCooldowns]);\n\n  // Regenerate energy over time\n  useState(() => {\n    const interval = setInterval(() => {\n      setEnergy(prev => Math.min(100, prev + 1));\n    }, 2000); // +1 energy every 2 seconds\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return {\n    PROTOCOL_ACTIONS,\n    canPerformAction,\n    performAction,\n    getCooldownRemaining,\n    energy,\n    actionCooldowns\n  };\n}\n\n// Interactive Action Menu Component\nexport function ProtocolActionMenu({ \n  targetProtocol, \n  playerStats, \n  onActionPerformed,\n  onClose \n}) {\n  const {\n    PROTOCOL_ACTIONS,\n    canPerformAction,\n    performAction,\n    getCooldownRemaining,\n    energy\n  } = useProtocolActions(playerStats, onActionPerformed);\n\n  const formatTime = (ms) => {\n    const seconds = Math.ceil(ms / 1000);\n    return seconds > 60 ? `${Math.floor(seconds/60)}:${(seconds%60).toString().padStart(2,'0')}` : `${seconds}s`;\n  };\n\n  const getActionDifficulty = (action) => {\n    if (action.successRate >= 0.7) return 'Easy';\n    if (action.successRate >= 0.5) return 'Medium';\n    if (action.successRate >= 0.3) return 'Hard';\n    return 'Extreme';\n  };\n\n  const getDifficultyColor = (difficulty) => {\n    switch (difficulty) {\n      case 'Easy': return '#4ecdc4';\n      case 'Medium': return '#feca57';\n      case 'Hard': return '#ff6b6b';\n      case 'Extreme': return '#ff4757';\n      default: return '#ffffff';\n    }\n  };\n\n  return (\n    <div className=\"protocol-action-menu\">\n      <div className=\"action-menu-header\">\n        <h3>🎯 Actions: {targetProtocol.name}</h3>\n        <div className=\"energy-display\">\n          <span>⚡ Energy: {energy}/100</span>\n          <div className=\"energy-bar\">\n            <div \n              className=\"energy-fill\" \n              style={{ width: `${energy}%` }}\n            />\n          </div>\n        </div>\n        <button className=\"close-button\" onClick={onClose}>×</button>\n      </div>\n\n      <div className=\"protocol-info\">\n        <p><strong>Target:</strong> {targetProtocol.name}</p>\n        <p><strong>TVL:</strong> ${(targetProtocol.tvl / 1000000).toFixed(1)}M</p>\n        <p><strong>Type:</strong> {targetProtocol.type}</p>\n        <p><strong>Status:</strong> {targetProtocol.playerOwned ? '✅ Controlled' : '🎯 Hostile'}</p>\n      </div>\n\n      <div className=\"actions-grid\">\n        {Object.values(PROTOCOL_ACTIONS).map(action => {\n          const canPerform = canPerformAction(action.id, targetProtocol);\n          const cooldownRemaining = getCooldownRemaining(action.id);\n          const difficulty = getActionDifficulty(action);\n          \n          return (\n            <div \n              key={action.id} \n              className={`action-card ${canPerform ? 'available' : 'unavailable'}`}\n            >\n              <div className=\"action-header\">\n                <span className=\"action-name\">{action.name}</span>\n                <span \n                  className=\"difficulty-badge\"\n                  style={{ color: getDifficultyColor(difficulty) }}\n                >\n                  {difficulty}\n                </span>\n              </div>\n              \n              <p className=\"action-description\">{action.description}</p>\n              \n              <div className=\"action-stats\">\n                <div className=\"success-rate\">\n                  Success Rate: {(action.successRate * 100).toFixed(0)}%\n                </div>\n                <div className=\"action-cost\">\n                  Cost: {Object.entries(action.cost).map(([resource, cost]) => \n                    `${cost} ${resource}`\n                  ).join(', ')}\n                </div>\n              </div>\n\n              {cooldownRemaining > 0 ? (\n                <div className=\"cooldown-display\">\n                  ⏳ Cooldown: {formatTime(cooldownRemaining)}\n                </div>\n              ) : (\n                <button\n                  className={`btn action-button ${canPerform ? 'btn-primary' : 'btn-disabled'}`}\n                  onClick={() => {\n                    if (performAction(action.id, targetProtocol)) {\n                      // Action performed successfully\n                    }\n                  }}\n                  disabled={!canPerform}\n                >\n                  {canPerform ? 'EXECUTE' : 'CANNOT USE'}\n                </button>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\n// Action Result Notification\nexport function ActionResultNotification({ result, onClose }) {\n  if (!result) return null;\n\n  const { action, isSuccess, result: actionResult } = result;\n  \n  return (\n    <div className={`action-result-notification ${isSuccess ? 'success' : 'failure'}`}>\n      <div className=\"result-header\">\n        <h4>{actionResult.title}</h4>\n        <button onClick={onClose}>×</button>\n      </div>\n      \n      <p className=\"result-message\">{actionResult.message}</p>\n      \n      {actionResult.effects && (\n        <div className=\"result-effects\">\n          <strong>Effects:</strong>\n          <ul>\n            {Object.entries(actionResult.effects).map(([effect, value]) => (\n              <li key={effect}>\n                {effect.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}: {typeof value === 'number' ? (value > 1 ? value : `${(value * 100).toFixed(0)}%`) : value.toString()}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}
